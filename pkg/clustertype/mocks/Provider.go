/*
  2023 NVIDIA CORPORATION & AFFILIATES

  Licensed under the Apache License, Version 2.0 (the License);
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an AS IS BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

// Package mocks contains autogenerated mocks used in testing.
package mocks

import (
	mock "github.com/stretchr/testify/mock"

	clustertype "github.com/Mellanox/network-operator/pkg/clustertype"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// GetClusterType provides a mock function with given fields:
func (_m *Provider) GetClusterType() clustertype.Type {
	ret := _m.Called()

	var r0 clustertype.Type
	if rf, ok := ret.Get(0).(func() clustertype.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(clustertype.Type)
	}

	return r0
}

// IsKubernetes provides a mock function with given fields:
func (_m *Provider) IsKubernetes() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsOpenshift provides a mock function with given fields:
func (_m *Provider) IsOpenshift() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewProvider creates a new instance of Provider.
// It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProvider(t mockConstructorTestingTNewProvider) *Provider {
	mockProvider := &Provider{}
	mockProvider.Mock.Test(t)

	t.Cleanup(func() { mockProvider.AssertExpectations(t) })

	return mockProvider
}
