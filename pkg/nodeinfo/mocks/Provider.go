// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import (
	nodeinfo "github.com/Mellanox/network-operator/pkg/nodeinfo"
	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// GetNodesAttributes provides a mock function with given fields: filters
func (_m *Provider) GetNodesAttributes(filters ...nodeinfo.Filter) []nodeinfo.NodeAttributes {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []nodeinfo.NodeAttributes
	if rf, ok := ret.Get(0).(func(...nodeinfo.Filter) []nodeinfo.NodeAttributes); ok {
		r0 = rf(filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nodeinfo.NodeAttributes)
		}
	}

	return r0
}

// Provider_GetNodesAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodesAttributes'
type Provider_GetNodesAttributes_Call struct {
	*mock.Call
}

// GetNodesAttributes is a helper method to define mock.On call
//   - filters ...nodeinfo.Filter
func (_e *Provider_Expecter) GetNodesAttributes(filters ...interface{}) *Provider_GetNodesAttributes_Call {
	return &Provider_GetNodesAttributes_Call{Call: _e.mock.On("GetNodesAttributes",
		append([]interface{}{}, filters...)...)}
}

func (_c *Provider_GetNodesAttributes_Call) Run(run func(filters ...nodeinfo.Filter)) *Provider_GetNodesAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]nodeinfo.Filter, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(nodeinfo.Filter)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Provider_GetNodesAttributes_Call) Return(_a0 []nodeinfo.NodeAttributes) *Provider_GetNodesAttributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_GetNodesAttributes_Call) RunAndReturn(run func(...nodeinfo.Filter) []nodeinfo.NodeAttributes) *Provider_GetNodesAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
