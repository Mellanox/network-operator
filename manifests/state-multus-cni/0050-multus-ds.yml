apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-multus-ds
  namespace: {{ .RuntimeSpec.Namespace }}
  labels:
    tier: node
    app: multus
    name: multus
spec:
  selector:
    matchLabels:
      name: multus
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        tier: node
        app: multus
        name: multus
      annotations:
        cluster-autoscaler.kubernetes.io/enable-ds-eviction: "false"
    spec:
      hostNetwork: true
      hostPID: true
      priorityClassName: "system-node-critical"
      terminationGracePeriodSeconds: 10
      {{- if .NodeAffinity }}
      affinity:
        nodeAffinity:
          {{- .NodeAffinity | yaml | nindent 10 }}
      {{- end }}
      serviceAccountName: multus
      {{- if .CrSpec.ImagePullSecrets }}
      imagePullSecrets:
      {{- range .CrSpec.ImagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      tolerations:
        {{- if .Tolerations }}
        {{- .Tolerations | yaml | nindent 8 }}
        {{- end }}
        - key: nvidia.com/gpu
          operator: Exists
          effect: NoSchedule
      initContainers:
        - name: install-multus-binary
          image: {{ .CrSpec.Repository }}/{{ .CrSpec.Image }}:{{ .CrSpec.Version }}
          command:
            - "cp"
            - "-f"
            - "/usr/src/multus-cni/bin/multus-shim"
            - "/host/opt/cni/bin/multus-shim"
          resources:
            requests:
              cpu: "10m"
              memory: "15Mi"
          securityContext:
            privileged: true
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - name: cnibin
              mountPath: /host/opt/cni/bin
              mountPropagation: Bidirectional
      containers:
        - name: kube-multus
          image: {{ .CrSpec.Repository }}/{{ .CrSpec.Image }}:{{ .CrSpec.Version }}
          command: ["/usr/src/multus-cni/bin/multus-daemon"]
          args:
            - "--config=/etc/cni/net.d/multus.d/daemon-config.json"
          {{- with .RuntimeSpec.ContainerResources }}
          {{- with index . "kube-multus" }}
          resources:
            {{- if .Requests }}
            requests:
              {{ .Requests | yaml | nindent 14}}
            {{- end }}
            {{- if .Limits }}
            limits:
              {{ .Limits | yaml | nindent 14}}
            {{- end }}
          {{- end }}
          {{- else }}
          resources:
            requests:
              cpu: "100m"
              memory: "50Mi"
            limits:
              cpu: "100m"
              memory: "50Mi"
          {{- end }}
          securityContext:
            privileged: true
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - name: cni
              mountPath: /host/etc/cni/net.d
            # multus-daemon expects that cnibin path must be identical between pod and container host.
            # e.g. if the cni bin is in '/opt/cni/bin' on the container host side, then it should be mount to '/opt/cni/bin' in multus-daemon,
            # not to any other directory, like '/opt/bin' or '/usr/bin'.
            - name: cnibin
              mountPath: /opt/cni/bin
            - name: host-run
              mountPath: /host/run
            - name: host-var-lib-cni-multus
              mountPath: /var/lib/cni/multus
            - name: host-var-lib-kubelet
              mountPath: /var/lib/kubelet
              mountPropagation: HostToContainer
            - name: host-run-k8s-cni-cncf-io
              mountPath: /run/k8s.cni.cncf.io
            - name: host-run-netns
              mountPath: /run/netns
              mountPropagation: HostToContainer
            - name: multus-cni-config
              mountPath: /etc/cni/net.d/multus.d
              readOnly: true
            - name: hostroot
              mountPath: /hostroot
              mountPropagation: HostToContainer
          env:
            - name: MULTUS_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
      volumes:
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: cnibin
          hostPath:
            path: {{ .RuntimeSpec.CniBinDirectory }}
        - name: hostroot
          hostPath:
            path: /
        - name: multus-cni-config
          configMap:
            name: multus-cni-config
            items:
            - key: daemon-config.json
              path: daemon-config.json
        - name: host-run
          hostPath:
            path: /run
        - name: host-var-lib-cni-multus
          hostPath:
            path: /var/lib/cni/multus
        - name: host-var-lib-kubelet
          hostPath:
            path: /var/lib/kubelet
        - name: host-run-k8s-cni-cncf-io
          hostPath:
            path: /run/k8s.cni.cncf.io
        - name: host-run-netns
          hostPath:
            path: /run/netns/

